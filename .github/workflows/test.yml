name: PR Testing Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]  # Écoute les événements d'ouverture, synchronisation, réouverture, et fermeture

jobs:
  test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install  # Utilise npm pour installer les dépendances

      - name: Build Application
        run: npm run build  # Construit l'application

      - name: Start Application
        run: |
          serve -s build > preview.log 2>&1 &  # Démarre l'application en mode serveur
          sleep 5  # Attendre que l'application démarre

      - name: Download and Install ngrok
        run: |
          curl -s https://bin.equinox.io/c/111111/ngrok-stable-linux-amd64.zip -o ngrok.zip  # Remplace avec l'URL correcte
          unzip ngrok.zip
          chmod +x ngrok
          mv ngrok /usr/local/bin  # Déplace ngrok dans le répertoire local

      - name: Expose Application via ngrok
        run: |
          ngrok http 57030 > ngrok.log &  # Change le port pour ngrok
          sleep 5
          echo "TEST_URL=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')" >> $GITHUB_ENV

      - name: Post Test URL in PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = process.env.TEST_URL;
            const prNumber = context.payload.pull_request.number;
            const message = `Tests passed! You can view the test URL here: ${url}`;
            await github.issues.createComment({
              ...context.repo,
              issue_number: prNumber,
              body: message,
            });

      - name: Stop Application on PR Close
        if: github.event.action == 'closed'
        run: |
          pkill -f serve  # Arrête le serveur
